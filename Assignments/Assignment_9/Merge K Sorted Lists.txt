import java.util.*;

class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        int N = scanner.nextInt();
        ListNode[] lists = new ListNode[K];

        for (int i = 0; i < K; i++) {
            ListNode dummy = new ListNode(-1);
            ListNode current = dummy;
            for (int j = 0; j < N; j++) {
                int val = scanner.nextInt();
                current.next = new ListNode(val);
                current = current.next;
            }
            lists[i] = dummy.next;
        }

        ListNode mergedList = mergeKLists(lists);
        printList(mergedList);
    }

    public static ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a.val));
        
        // Add the heads of all K lists to the min heap
        for (ListNode node : lists) {
            if (node != null) {
                minHeap.offer(node);
            }
        }

        ListNode dummy = new ListNode(-1);
        ListNode current = dummy;

        // Merge the lists until the min heap becomes empty
        while (!minHeap.isEmpty()) {
            ListNode minNode = minHeap.poll();
            current.next = minNode;
            current = current.next;

            if (minNode.next != null) {
                minHeap.offer(minNode.next);
            }
        }

        return dummy.next;
    }

    public static void printList(ListNode head) {
        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next;
        }
    }
}