import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt(); // Size of the array
        int k = scanner.nextInt(); // kth largest element to find
        int[] nums = new int[n]; // Array to store elements

        // Read the array elements
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        // Find the kth largest element
        int kthLargest = findKthLargest(nums, k);
        System.out.println(kthLargest);
    }

    public static int findKthLargest(int[] nums, int k) {
        if (nums == null || nums.length == 0 || k < 1 || k > nums.length) {
            return -1; // Invalid input or out of bounds k
        }

        return quickSelect(nums, 0, nums.length - 1, nums.length - k);
    }

    // Perform quick select to find the kth largest element
    private static int quickSelect(int[] nums, int left, int right, int k) {
        if (left == right) {
            return nums[left]; // Base case: Only one element
        }

        // Choose a random pivot element
        Random random = new Random();
        int pivotIndex = left + random.nextInt(right - left + 1);
        pivotIndex = partition(nums, left, right, pivotIndex);

        // Recurse into the appropriate subarray
        if (k == pivotIndex) {
            return nums[k]; // Found the kth largest element
        } else if (k < pivotIndex) {
            return quickSelect(nums, left, pivotIndex - 1, k);
        } else {
            return quickSelect(nums, pivotIndex + 1, right, k);
        }
    }

    // Partition the array based on the chosen pivot
    private static int partition(int[] nums, int left, int right, int pivotIndex) {
        int pivotValue = nums[pivotIndex];
        swap(nums, pivotIndex, right); // Move pivot to the end
        int storeIndex = left;

        for (int i = left; i < right; i++) {
            if (nums[i] < pivotValue) {
                swap(nums, storeIndex, i);
                storeIndex++;
            }
        }
        swap(nums, storeIndex, right); // Move pivot to its final place
        return storeIndex;
    }

    // Helper method to swap elements in the array
    private static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}