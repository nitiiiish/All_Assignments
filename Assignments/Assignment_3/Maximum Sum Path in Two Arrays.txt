import java.util.*;
public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt(); // Number of test cases
        
        for (int i = 0; i < t; i++) {
            int n = scanner.nextInt(); // Size of the first array
            int m = scanner.nextInt(); // Size of the second array
            
            int[] arr1 = new int[n];
            int[] arr2 = new int[m];
            
            for (int j = 0; j < n; j++) {
                arr1[j] = scanner.nextInt();
            }
            
            for (int j = 0; j < m; j++) {
                arr2[j] = scanner.nextInt();
            }
            
            int result = maxPathSumBitonicSubsequence(arr1, arr2, n, m);
            System.out.println(result);
        }
    }
    
    public static int maxPathSumBitonicSubsequence(int[] arr1, int[] arr2, int n, int m) {
        int i = 0, j = 0;
        int sum1 = 0, sum2 = 0, result = 0;
        
        while (i < n && j < m) {
            if (arr1[i] < arr2[j]) {
                sum1 += arr1[i];
                i++;
            } else if (arr1[i] > arr2[j]) {
                sum2 += arr2[j];
                j++;
            } else {
                result += Math.max(sum1, sum2) + arr1[i];
                sum1 = 0;
                sum2 = 0;
                i++;
                j++;
            }
        }
        
        while (i < n) {
            sum1 += arr1[i];
            i++;
        }
        
        while (j < m) {
            sum2 += arr2[j];
            j++;
        }
        
        result += Math.max(sum1, sum2);
        return result;
    }
}
