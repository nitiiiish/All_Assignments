import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int val) {
        this.val = val;
        this.left = this.right = null;
    }
}

public class Main {
    static int preIndex;

    static TreeNode buildTree(int[] preorder, int[] inorder, int inStart, int inEnd) {
        if (inStart > inEnd) {
            return null;
        }

        TreeNode root = new TreeNode(preorder[preIndex++]);

        if (inStart == inEnd) {
            return root;
        }

        int inIndex = findIndex(inorder, inStart, inEnd, root.val);

        root.left = buildTree(preorder, inorder, inStart, inIndex - 1);
        root.right = buildTree(preorder, inorder, inIndex + 1, inEnd);

        return root;
    }

    static int findIndex(int[] arr, int start, int end, int val) {
        for (int i = start; i <= end; i++) {
            if (arr[i] == val) {
                return i;
            }
        }
        return -1;
    }

    static void modifiedPreorder(TreeNode root) {
        if (root != null) {
            if (root.left != null) {
                System.out.print(root.left.val + " => ");
            } else {
                System.out.print("END => ");
            }
            System.out.print(root.val);
            if (root.right != null) {
                System.out.print(" <= " + root.right.val);
            } else {
                System.out.print(" <= END");
            }
            System.out.println();
            modifiedPreorder(root.left);
            modifiedPreorder(root.right);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt(); // Size of preorder array
        int[] preorder = new int[n];
        for (int i = 0; i < n; i++) {
            preorder[i] = scanner.nextInt();
        }

        int m = scanner.nextInt(); // Size of inorder array
        int[] inorder = new int[m];
        for (int i = 0; i < m; i++) {
            inorder[i] = scanner.nextInt();
        }

        preIndex = 0;
        TreeNode root = buildTree(preorder, inorder, 0, m - 1);

        modifiedPreorder(root);
    }
}