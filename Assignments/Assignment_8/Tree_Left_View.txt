import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int val) {
        this.val = val;
        this.left = this.right = null;
    }
}

public class Main {
    static List<Integer> leftSideView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                // Add the first node encountered at each level to the result
                if (i == 0) {
                    result.add(node.val);
                }
                // Add left child first so that it will be polled first
                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
            }
        }
        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        // Read level order traversal of the tree
        String[] input = scanner.nextLine().split(" ");

        TreeNode root = constructTree(input);

        List<Integer> leftView = leftSideView(root);
        for (int num : leftView) {
            System.out.print(num + " ");
        }
    }

    // Function to construct a binary tree from level order traversal input
    static TreeNode constructTree(String[] input) {
        if (input.length == 0 || input[0].equals("-1")) return null;

        TreeNode root = new TreeNode(Integer.parseInt(input[0]));
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int i = 1;

        while (!queue.isEmpty() && i < input.length) {
            TreeNode currNode = queue.poll();

            if (!input[i].equals("-1")) {
                currNode.left = new TreeNode(Integer.parseInt(input[i]));
                queue.offer(currNode.left);
            }
            i++;

            if (i < input.length && !input[i].equals("-1")) {
                currNode.right = new TreeNode(Integer.parseInt(input[i]));
                queue.offer(currNode.right);
            }
            i++;
        }
        return root;
    }
}