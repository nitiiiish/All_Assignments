import java.util.Scanner;

class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int val) {
        this.val = val;
        this.left = this.right = null;
    }
}

public class Main {
    public static void printNodesWithoutSibling(TreeNode root) {
        if (root == null) {
            return;
        }
        // Check if the current node doesn't have a sibling
        if (root.left != null && root.right == null) {
            System.out.print(root.left.val + " ");
        }
        if (root.left == null && root.right != null) {
            System.out.print(root.right.val + " ");
        }
        // Recursively check left and right subtrees
        printNodesWithoutSibling(root.left);
        printNodesWithoutSibling(root.right);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TreeNode root = constructTree(scanner);
        printNodesWithoutSibling(root);
    }

    // Function to construct a binary tree from input
    static TreeNode constructTree(Scanner scanner) {
        if (!scanner.hasNext()) return null;

        int val = scanner.nextInt();
        if (!scanner.hasNextBoolean()) return new TreeNode(val);

        boolean hasLeft = scanner.nextBoolean();
        TreeNode node = new TreeNode(val);
        if (hasLeft) {
            node.left = constructTree(scanner);
        }
        if (scanner.hasNextBoolean()) {
            boolean hasRight = scanner.nextBoolean();
            if (hasRight) {
                node.right = constructTree(scanner);
            }
        }
        return node;
    }
}