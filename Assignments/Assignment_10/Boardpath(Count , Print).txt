import java.util.*;

public class Main {

    static int count = 0;

    // Recursive function to count the number of ways to travel the board using the dice
    static int countWays(int N, int M, int currPos, int[][] memo) {
        // Base case: If current position reaches or exceeds the board size, return 1
        if (currPos >= N) {
            if (currPos == N) {
                return 1;
            }
            return 0;
        }

        if (memo[currPos][N] != -1) {
            return memo[currPos][N];
        }

        int ways = 0;

        // Roll the dice and explore all possible transitions
        for (int i = 1; i <= M; i++) {
            ways += countWays(N, M, currPos + i, memo);
        }

        memo[currPos][N] = ways;
        return ways;
    }

    // Recursive function to print all valid paths across the board
    static void printPaths(int N, int M, int currPos, String path, int[][] memo) {
        // Base case: If current position reaches or exceeds the board size, print the path
        if (currPos >= N) {
            if (currPos == N) {
                count++;
                System.out.print(path + " ");
            }
            return;
        }

        // Roll the dice and explore all possible transitions
        for (int i = 1; i <= M; i++) {
            if (currPos + i <= N) {
                printPaths(N, M, currPos + i, path + i, memo);
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt(); // Size of the board
        int M = scanner.nextInt(); // Number of faces of the dice

        int[][] memo = new int[N + 1][N + 1];
        for (int i = 0; i <= N; i++) {
            Arrays.fill(memo[i], -1);
        }

        countWays(N, M, 0, memo); // Compute the number of ways
        printPaths(N, M, 0, "", memo); // Print all the paths
        System.out.println(); // Move to the next line
        System.out.println(count); // Display the number of paths
    }
}
