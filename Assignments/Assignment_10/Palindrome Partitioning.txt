import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt(); // Number of test cases
        scanner.nextLine(); // Consume newline
        while (t-- > 0) {
            String s = scanner.nextLine(); // Input string
            int minPartitions = minPartitionsNeeded(s);
            System.out.println(minPartitions);
        }
    }

    public static int minPartitionsNeeded(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        int[] cuts = new int[n];

        // Initialize single characters and substrings of length 2 as palindrome
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
            if (i < n - 1 && s.charAt(i) == s.charAt(i + 1)) {
                dp[i][i + 1] = true;
            }
        }

        // Fill dp table for substrings of length 3 and more
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                if (s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1]) {
                    dp[i][j] = true;
                }
            }
        }

        // Determine minimum number of partitions needed
        for (int i = 0; i < n; i++) {
            if (dp[0][i]) {
                cuts[i] = 0;
            } else {
                cuts[i] = Integer.MAX_VALUE;
                for (int j = 0; j < i; j++) {
                    if (dp[j + 1][i]) {
                        cuts[i] = Math.min(cuts[i], cuts[j] + 1);
                    }
                }
            }
        }

        return cuts[n - 1];
    }
}
